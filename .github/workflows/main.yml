name: Build patched V8 d8 (multi versions)

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-patched-v8
  cancel-in-progress: false

env:
  MIN_VERSION: 12.0.1
  V8_REPO: https://github.com/v8/v8.git
  PATCH_FILE: patch.diff
  EXPECTED_PATCH_FILE_COUNT: "6"
  # 限制每次最多处理多少个新版本（空字符串 = 不限制）
  MAX_PER_RUN: ""

jobs:
  determine-versions:
    name: Determine unprocessed V8 versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.determine.outputs.matrix }}
      versions_json: ${{ steps.determine.outputs.versions }}
      has_versions: ${{ steps.determine.outputs.has_versions }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show Python version
        run: python3 --version

      - name: Determine new versions
        id: determine
        run: |
          python3 determine_versions.py

      - name: Debug outputs
        run: |
          echo "matrix=${{ steps.determine.outputs.matrix }}"
          echo "versions=${{ steps.determine.outputs.versions }}"
          echo "has_versions=${{ steps.determine.outputs.has_versions }}"

  build:
    name: Build d8 (${{ matrix.version }} / ${{ matrix.os }})
    needs: determine-versions
    if: needs.determine-versions.outputs.has_versions == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.determine-versions.outputs.matrix) }}
    env:
      VERSION: ${{ matrix.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python-is-python3 build-essential clang libglib2.0-dev flex bison git curl unzip pkg-config
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" >> $GITHUB_PATH
          echo "PATH after depot_tools: $PATH"
          python --version

      - name: Prepare environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          python --version

      - name: Clone V8
        run: |
          set -e
          git clone "$V8_REPO" v8
          cd v8
          git fetch --tags
          git checkout "$VERSION"

      - name: Apply patch
        id: apply
        shell: bash
        run: |
          set -e
          cd v8
          if [ ! -f "$GITHUB_WORKSPACE/$PATCH_FILE" ]; then
            echo "Patch file not found at repo root!"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          cp "$GITHUB_WORKSPACE/$PATCH_FILE" .
          mapfile -t EXPECTED < <(grep -E '^\+\+\+ b/' "$PATCH_FILE" | sed 's|+++ b/||' | sort -u)
          echo "Patch lists ${#EXPECTED[@]} unique file paths:"
          printf '  %s\n' "${EXPECTED[@]}"

          if [ -n "${EXPECTED_PATCH_FILE_COUNT}" ] && [ "${#EXPECTED[@]}" -ne "${EXPECTED_PATCH_FILE_COUNT}" ]; then
            echo "Expected ${EXPECTED_PATCH_FILE_COUNT} files but patch lists ${#EXPECTED[@]}"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          set +e
          git apply --3way "$PATCH_FILE"
          rc=$?
          set -e
          if [ $rc -ne 0 ]; then
            echo "git apply failed code=$rc"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          MODIFIED=$(git diff --name-only)
          missing=0
          for f in "${EXPECTED[@]}"; do
            if ! grep -qx "$f" <<< "$MODIFIED"; then
              echo "Missing modified file in diff: $f"
              missing=1
            fi
          done
          if [ $missing -ne 0 ]; then
            echo "Not all expected files appear in diff."
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Patch applied OK."
          echo "applied=true" >> $GITHUB_OUTPUT

      - name: Configure & build (Linux)
        if: runner.os == 'Linux' && steps.apply.outputs.applied == 'true'
        run: |
          cd v8
          python tools/dev/v8gen.py x64.release -- v8_enable_disassembler=true v8_enable_object_print=true
          ninja -C out.gn/x64.release d8

      - name: Configure & build (Windows)
        if: runner.os == 'Windows' && steps.apply.outputs.applied == 'true'
        shell: pwsh
        run: |
          cd v8
          python tools/dev/v8gen.py x64.release -- v8_enable_disassembler=true v8_enable_object_print=true
          ninja -C out.gn/x64.release d8

      - name: Package artifact
        if: steps.apply.outputs.applied == 'true'
        run: |
          mkdir -p artifact
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp v8/out.gn/x64.release/d8.exe artifact/
          else
            cp v8/out.gn/x64.release/d8 artifact/
          fi
          ls -l artifact

      - name: Upload artifact
        if: steps.apply.outputs.applied == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: d8-${{ matrix.version }}-${{ runner.os }}
          path: artifact/*
          retention-days: 14

      - name: Skipped (patch not applied)
        if: steps.apply.outputs.applied != 'true'
        run: echo "Skipping build for $VERSION on ${{ runner.os }} (patch not applied)."

  aggregate-and-release:
    name: Aggregate artifacts & create releases
    needs: [determine-versions, build]
    if: needs.determine-versions.outputs.has_versions == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded

      - name: Install jq & gh
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          gh --version || true

      - name: Ensure public/version.json
        run: |
          mkdir -p public
          if [ ! -f public/version.json ]; then
            echo "[]" > public/version.json
          fi
          cat public/version.json

      - name: Create releases and update version.json
        env:
          VERSIONS: ${{ needs.determine-versions.outputs.versions_json }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          UPDATED=false
          echo "$VERSIONS" | jq -r '.[]' | while read -r v; do
            [ -z "$v" ] && continue
            echo "Processing version $v"
            LIN_DIR="downloaded/d8-${v}-Linux"
            WIN_DIR="downloaded/d8-${v}-Windows"
            if [ ! -d "$LIN_DIR" ] || [ ! -d "$WIN_DIR" ]; then
              echo "Missing artifacts for $v -> skip release"
              continue
            fi
            mkdir -p "public/$v"
            cp "$LIN_DIR"/d8 "public/$v/d8-linux"
            cp "$WIN_DIR"/d8.exe "public/$v/d8-windows.exe"

            if gh release view "$v" >/dev/null 2>&1; then
              echo "Release $v already exists, skipping create."
            else
              gh release create "$v" \
                "public/$v/d8-linux" \
                "public/$v/d8-windows.exe" \
                --title "$v" \
                --notes "Patched d8 for V8 $v (flags: v8_enable_disassembler=true, v8_enable_object_print=true)."
            fi

            if ! jq -e --arg v "$v" '.[] | select(. == $v)' public/version.json >/dev/null; then
              jq --arg v "$v" '. + [$v]' public/version.json > public/version.json.tmp && mv public/version.json.tmp public/version.json
              UPDATED=true
            fi
          done
          if [ "$UPDATED" = true ]; then
            jq 'sort_by(split(".") | map(tonumber))' public/version.json > public/version.json.tmp && mv public/version.json.tmp public/version.json
          fi
          echo "Final version.json:"
          cat public/version.json

      - name: Commit & push updates
        run: |
          if git diff --quiet -- public; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public
          git commit -m "Update public with new patched d8 versions [skip ci]"
          git push
