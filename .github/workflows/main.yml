name: Build patched V8 d8 (multi versions)

on:
  schedule:
    - cron: "0 2 * * *"   # 每天 02:00 UTC 运行
  workflow_dispatch:

permissions:
  contents: write
  actions: read

concurrency:
  group: build-patched-v8
  cancel-in-progress: false

env:
  MIN_VERSION: 12.0.1
  V8_REPO: https://github.com/v8/v8.git
  PATCH_FILE: patch.diff

jobs:
  determine-versions:
    name: Determine unprocessed V8 versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      versions_json: ${{ steps.collect.outputs.versions }}
      has_versions: ${{ steps.set-matrix.outputs.has_versions }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure public/version.json exists (load processed)
        id: load
        run: |
          mkdir -p public
          if [ ! -f public/version.json ]; then
            echo "[]" > public/version.json
          fi
          echo "processed=$(tr -d '\n' < public/version.json)" >> $GITHUB_OUTPUT

      - name: Fetch V8 tags
        id: fetch_tags
        run: |
          git ls-remote --tags "$V8_REPO" | awk '{print $2}' | sed -n 's@refs/tags/@@p' \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | sort -V > all_tags.txt
          echo "TOTAL_TAGS=$(wc -l < all_tags.txt)"
          head all_tags.txt

      - name: Filter new versions since MIN_VERSION
        id: filter
        run: |
          MIN_VERSION="${MIN_VERSION}"
          echo '${{ steps.load.outputs.processed }}' | jq -r '.[]' > processed.txt
          NEW_LIST=()
          while read -r tag; do
            [ -z "$tag" ] && continue
            # 如果 tag < MIN_VERSION 则跳过
            if [ "$(printf "%s\n%s\n" "$MIN_VERSION" "$tag" | sort -V | head -n1)" != "$MIN_VERSION" ]; then
              continue
            fi
            if grep -qx "$tag" processed.txt; then
              continue
            fi
            NEW_LIST+=("$tag")
          done < all_tags.txt
          printf "%s\n" "${NEW_LIST[@]}" > new_versions.txt
          echo "New versions count: ${#NEW_LIST[@]}"

      - name: Build dynamic matrix JSON
        id: set-matrix
        run: |
          if [ ! -s new_versions.txt ]; then
            echo 'matrix={"include":[]}' >> $GITHUB_OUTPUT
            echo "has_versions=false" >> $GITHUB_OUTPUT
            exit 0
          fi
            MATRIX=$(jq -n -c '
              [inputs | split("\n")[] | select(length>0)] as $vers |
              $vers | map(
                [
                  {"os":"ubuntu-latest","version":.},
                  {"os":"windows-latest","version":.}
                ][]
              ) | {include: .}
          ' <(cat new_versions.txt))
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "has_versions=true" >> $GITHUB_OUTPUT

      - name: Collect versions JSON
        id: collect
        run: |
          if [ -s new_versions.txt ]; then
            VERS_JSON=$(jq -R -s 'split("\n") | map(select(length>0))' new_versions.txt)
          else
            VERS_JSON='[]'
          fi
          echo "versions=$VERS_JSON" >> $GITHUB_OUTPUT

  build:
    name: Build d8 (${{ matrix.version }} / ${{ matrix.os }})
    needs: determine-versions
    if: needs.determine-versions.outputs.has_versions == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.determine-versions.outputs.matrix) }}
    env:
      VERSION: ${{ matrix.version }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare environment (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python-is-python3 build-essential clang libglib2.0-dev flex bison git curl unzip
          python --version
          # 获取 depot_tools (确保有 gn / ninja 最新版本)
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" >> $GITHUB_PATH

      - name: Prepare environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python --version
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          echo "$PWD/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Clone V8
        run: |
          set -e
          # 直接获取指定标签（不能保证存在浅克隆 -> 退回全克隆）
          git clone $V8_REPO v8
          cd v8
          git fetch --tags
          git checkout "$VERSION"
          # （可选）初始化子模块
          git submodule update --init --recursive || true

      - name: Apply patch
        id: apply
        shell: bash
        run: |
          set -e
          cd v8
          if [ ! -f "$GITHUB_WORKSPACE/$PATCH_FILE" ]; then
            echo "Patch file not found!"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          cp "$GITHUB_WORKSPACE/$PATCH_FILE" .
          # 抽取 patch 中全部 +++ b/ 行（假设 6 个，如果不是可调整）
          mapfile -t EXPECTED < <(grep -E '^\+\+\+ b/' "$PATCH_FILE" | sed 's|+++ b/||')
          echo "Expected modified files (${#EXPECTED[@]}):"
          printf '  %s\n' "${EXPECTED[@]}"
          set +e
          git apply --3way "$PATCH_FILE"
          APPLY_STATUS=$?
          set -e
          if [ $APPLY_STATUS -ne 0 ]; then
            echo "Patch application failed (exit $APPLY_STATUS)"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          MODIFIED=$(git diff --name-only)
          missing=0
          for f in "${EXPECTED[@]}"; do
            if ! grep -qx "$f" <<<"$MODIFIED"; then
              echo "Missing expected modified file: $f"
              missing=1
            fi
          done
          if [ $missing -ne 0 ]; then
            echo "Some expected files not modified."
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Patch applied OK."
          echo "applied=true" >> $GITHUB_OUTPUT

      - name: Configure & build (Linux)
        if: runner.os == 'Linux' && steps.apply.outputs.applied == 'true'
        run: |
          cd v8
          python tools/dev/v8gen.py x64.release -- v8_enable_disassembler=true v8_enable_object_print=true
          ninja -C out.gn/x64.release d8

      - name: Configure & build (Windows)
        if: runner.os == 'Windows' && steps.apply.outputs.applied == 'true'
        shell: pwsh
        run: |
          cd v8
          python tools/dev/v8gen.py x64.release -- v8_enable_disassembler=true v8_enable_object_print=true
          ninja -C out.gn/x64.release d8

      - name: Package artifact
        if: steps.apply.outputs.applied == 'true'
        run: |
          mkdir -p artifact
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp v8/out.gn/x64.release/d8.exe artifact/
          else
            cp v8/out.gn/x64.release/d8 artifact/
          fi
          ls -l artifact

      - name: Upload artifact
        if: steps.apply.outputs.applied == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: d8-${{ matrix.version }}-${{ runner.os }}
          path: artifact/*
          retention-days: 14

      - name: Skipped (patch not applied)
        if: steps.apply.outputs.applied != 'true'
        run: echo "Skipping build for $VERSION on ${{ runner.os }} (patch not applied)."

  aggregate-and-release:
    name: Aggregate artifacts & create releases
    needs: [determine-versions, build]
    if: needs.determine-versions.outputs.has_versions == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Prepare public/version.json
        run: |
          mkdir -p public
          if [ ! -f public/version.json ]; then
            echo "[]" > public/version.json
          fi
          cat public/version.json

      - name: Process versions & create releases
        env:
          VERSIONS: ${{ needs.determine-versions.outputs.versions_json }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          NEW_VERS=$(echo "$VERSIONS" | jq -r '.[]')
          UPDATED=false

          for v in $NEW_VERS; do
            echo "=== Handling version $v ==="
            # 匹配已上传工件目录名
            LIN_DIR=$(ls -d downloaded/d8-"$v"-Linux 2>/dev/null || true)
            WIN_DIR=$(ls -d downloaded/d8-"$v"-Windows 2>/dev/null || true)
            if [ -z "$LIN_DIR" ] || [ -z "$WIN_DIR" ]; then
              echo "Missing artifacts for $v (Linux or Windows). Skip release."
              continue
            fi

            mkdir -p "public/$v"
            cp "$LIN_DIR"/d8 "public/$v/d8-linux"
            cp "$WIN_DIR"/d8.exe "public/$v/d8-windows.exe"

            if gh release view "$v" >/dev/null 2>&1; then
              echo "Release $v already exists, skip creating."
            else
              gh release create "$v" \
                "public/$v/d8-linux" \
                "public/$v/d8-windows.exe" \
                --title "$v" \
                --notes "Patched d8 for V8 $v (flags: v8_enable_disassembler=true, v8_enable_object_print=true)."
            fi

            if ! jq -e --arg v "$v" '.[] | select(. == $v)' public/version.json >/dev/null; then
              jq --arg v "$v" '. + [$v]' public/version.json > public/version.json.tmp && mv public/version.json.tmp public/version.json
              UPDATED=true
            fi
          done

          if [ "$UPDATED" = true ]; then
            # 重新排序（语义排序）
            jq 'sort_by( (split(".") | map(tonumber)) )' public/version.json > public/version.json.tmp && mv public/version.json.tmp public/version.json
          fi

          echo "Final version.json:"
          cat public/version.json

      - name: Commit & push public directory (if changed)
        run: |
          if git diff --quiet -- public; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public
          git commit -m "Update public with new patched d8 versions [skip ci]"
          git push
