name: Build patched V8 d8

on:
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      max_per_run:
        description: "本次最多处理多少个新版本（默认 20）"
        required: false
        default: "20"

permissions:
  contents: write
  actions: write

concurrency:
  group: build-patched-v8
  cancel-in-progress: false

env:
  # 使用 GitHub 镜像获取 tags（较快），支持 3/4 段版本号
  V8_REPO: https://github.com/v8/v8.git
  MIN_VERSION: 12.0.1
  PATCH_FILE: patch.diff
  EXPECTED_PATCH_FILE_COUNT: "6"
  MAX_PER_RUN: ${{ github.event.inputs.max_per_run || '20' }}

jobs:
  determine-versions:
    name: Determine unprocessed versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.determine.outputs.matrix }}
      versions_json: ${{ steps.determine.outputs.versions }}
      has_versions: ${{ steps.determine.outputs.has_versions }}
      leftover_total: ${{ steps.determine.outputs.leftover_total }}
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure public JSON tracking
        run: |
          mkdir -p public
          [ -f public/version.json ] || echo "[]" > public/version.json
          [ -f public/failed.json ] || echo "[]" > public/failed.json
          echo "version.json:"; cat public/version.json
          echo "failed.json:"; cat public/failed.json

      - name: Show Python
        run: python3 --version

      - name: Determine versions batch
        id: determine
        run: python3 determine_versions.py

      - name: Debug outputs
        run: |
          echo matrix=${{ steps.determine.outputs.matrix }}
          echo versions=${{ steps.determine.outputs.versions }}
          echo has_versions=${{ steps.determine.outputs.has_versions }}
          echo leftover=${{ steps.determine.outputs.leftover_total }}

  build:
    name: Build ${{ matrix.version }} / ${{ matrix.os }}
    needs: determine-versions
    if: needs.determine-versions.outputs.has_versions == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJSON(needs.determine-versions.outputs.matrix) }}
    env:
      VERSION: ${{ matrix.version }}
      DEPOT_TOOLS_WIN_TOOLCHAIN: "0"
      GYP_MSVS_VERSION: "2022"
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------- Prepare depot_tools & toolchain --------
      - name: Prepare (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y python3 python-is-python3 build-essential clang libglib2.0-dev flex bison git curl unzip pkg-config patch
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$PWD/depot_tools:$PATH"
          echo "$PWD/depot_tools" >> $GITHUB_PATH
          python --version
          gclient --version

      - name: Prepare (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          chcp 65001
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          # 当前步骤立即生效
          $env:PATH = "$PWD\depot_tools;" + $env:PATH
          "$PWD\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          "PYTHONUTF8=1"              | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PYTHONIOENCODING=UTF-8"    | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "GYP_MSVS_VERSION=2022"     | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          python --version
          gclient --version

      # -------- Sync V8 from GitHub (main repo) then DEPS from googlesource --------
      - name: Sync V8 (tag-aware, shallow main repo)
        shell: bash
        run: |
          set -eux
          # 1. 用 GitHub 主仓库（unmanaged 模式：我们手动 checkout tag）
          gclient config --name v8 --unmanaged https://github.com/v8/v8.git
          # 2. 初次同步主仓库（浅历史 & 不跑 hooks）
            # --no-history (或旧版本 --nohistory) 减少 git 历史；如某些旧标签需要祖先提交可去掉
          gclient sync --nohooks --no-history -D
          # 3. 切 checkout 指定版本 tag
          cd v8
          git fetch --tags
          git checkout "${VERSION}"
          cd ..
          # 4. 再同步依赖（DEPS 指向的仍是 googlesource/CIPD）
          gclient sync --no-history -D
          # 5. 运行 hooks（生成 gn, ninja, 下载 clang/gn 等 CIPD 包）
          gclient runhooks
          cd v8
          git log -1 --oneline

      # -------- Apply custom patch (semantic fuzzy) --------
      - name: Apply patch
        id: apply
        shell: bash
        run: |
          set -e
          cd v8
          if [ ! -f "$GITHUB_WORKSPACE/$PATCH_FILE" ]; then
            echo "Missing patch file $PATCH_FILE"
            echo "$VERSION" >> "$GITHUB_WORKSPACE/failed_versions.txt"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          cp "$GITHUB_WORKSPACE/$PATCH_FILE" .
          cp "$GITHUB_WORKSPACE/apply_patch.py" .
          python3 apply_patch.py --patch "$PATCH_FILE" --verbose --report apply_patch_report.txt
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "Patch application failed (rc=$rc)."
            echo "$VERSION" >> "$GITHUB_WORKSPACE/failed_versions.txt"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # 简单验证预期文件是否至少有一个修改
          expected_changed=0
          while read -r f; do
            [ -z "$f" ] && continue
            if git diff --name-only | grep -qx "$f"; then
              expected_changed=1
              break
            fi
          done < <(grep -E '^\+\+\+ b/' "$PATCH_FILE" | sed 's|+++ b/||' | sort -u)
          if [ $expected_changed -eq 0 ]; then
            echo "No expected patch file changed after apply; treat as failure."
            echo "$VERSION" >> "$GITHUB_WORKSPACE/failed_versions.txt"
            echo "applied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "applied=true" >> $GITHUB_OUTPUT

      - name: Upload patch report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: patch-report-${{ matrix.version }}-${{ runner.os }}
          path: v8/apply_patch_report.txt
          retention-days: 7

      # -------- Build --------
      - name: Configure & build (Linux)
        if: runner.os == 'Linux' && steps.apply.outputs.applied == 'true'
        shell: bash
        run: |
          set -eux
          cd v8
          python tools/dev/v8gen.py x64.release -- v8_enable_disassembler=true v8_enable_object_print=true is_component_build=false
          ninja -C out.gn/x64.release d8

      - name: Configure & build (Windows)
        if: runner.os == 'Windows' && steps.apply.outputs.applied == 'true'
        shell: pwsh
        run: |
          cd v8
          python tools/dev/v8gen.py x64.release -- v8_enable_disassembler=true v8_enable_object_print=true is_component_build=false
          ninja -C out.gn/x64.release d8

      # -------- Artifacts --------
      - name: Package artifact
        if: steps.apply.outputs.applied == 'true'
        shell: bash
        run: |
          set -e
          mkdir -p artifact
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp v8/out.gn/x64.release/d8.exe artifact/
          else
            cp v8/out.gn/x64.release/d8 artifact/
          fi
          ls -l artifact

      - name: Upload artifact
        if: steps.apply.outputs.applied == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: d8-${{ matrix.version }}-${{ runner.os }}
          path: artifact/*
          retention-days: 14

      - name: Record failure (no patch)
        if: steps.apply.outputs.applied != 'true'
        run: echo "Skipping build for $VERSION on ${{ runner.os }} because patch not applied."

  aggregate-and-release:
    name: Aggregate & release
    needs: [determine-versions, build]
    if: needs.determine-versions.outputs.has_versions == 'true'
    runs-on: ubuntu-latest
    outputs:
      leftover_total: ${{ needs.determine-versions.outputs.leftover_total }}
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded

      - name: Install jq & gh
        run: |
            sudo apt-get update
            sudo apt-get install -y jq
            gh --version || true

      - name: Ensure JSON tracking
        run: |
          mkdir -p public
          [ -f public/version.json ] || echo "[]" > public/version.json
          [ -f public/failed.json ] || echo "[]" > public/failed.json
          echo "version.json:"; cat public/version.json
          echo "failed.json:"; cat public/failed.json

      - name: Merge failed versions
        run: |
          set -e
          if [ -f failed_versions.txt ]; then
            sort -u failed_versions.txt > _failed_collected.txt
            while read -r v; do
              [ -z "$v" ] && continue
              jq -e --arg v "$v" '.[] | select(. == $v)' public/failed.json >/dev/null || \
                jq --arg v "$v" '. + [$v]' public/failed.json > public/failed.tmp && mv public/failed.tmp public/failed.json
            done < _failed_collected.txt
          fi
          echo "failed.json after merge:"; cat public/failed.json

      - name: Create releases & update version.json
        env:
          VERSIONS: ${{ needs.determine-versions.outputs.versions_json }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          UPDATED=false
          echo "$VERSIONS" | jq -r '.[]' | while read -r v; do
            [ -z "$v" ] && continue
            LIN_DIR="downloaded/d8-${v}-Linux"
            WIN_DIR="downloaded/d8-${v}-Windows"
            if [ ! -d "$LIN_DIR" ] || [ ! -d "$WIN_DIR" ]; then
              echo "Skip $v (missing one platform artifact)."
              continue
            fi
            mkdir -p "public/$v"
            cp "$LIN_DIR"/d8 "public/$v/d8-linux"
            cp "$WIN_DIR"/d8.exe "public/$v/d8-windows.exe"
            if gh release view "$v" >/dev/null 2>&1; then
              echo "Release $v exists."
            else
              gh release create "$v" \
                "public/$v/d8-linux" \
                "public/$v/d8-windows.exe" \
                --title "$v" \
                --notes "Patched d8 for V8 $v (semantic fuzzy patch)."
            fi
            if ! jq -e --arg v "$v" '.[] | select(. == $v)' public/version.json >/dev/null; then
              jq --arg v "$v" '. + [$v]' public/version.json > public/version.json.tmp && mv public/version.json.tmp public/version.json
              UPDATED=true
            fi
          done
          if [ "$UPDATED" = true ]; then
            # 排序：支持 3/4 段版本（补零到 4 段再比较）
            jq '[.[]] | sort_by( (split(".") + ["0","0","0","0"])[0:4] | map(tonumber) )' public/version.json > public/version.json.tmp && mv public/version.json.tmp public/version.json
          fi
          echo "Final version.json:"; cat public/version.json
          echo "Final failed.json:"; cat public/failed.json

      - name: Commit & push public/
        run: |
          if git diff --quiet -- public; then
            echo "No changes in public/."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public
            # 跳过再次触发（如你不想跳过，可移除 [skip ci]）
          git commit -m "Update public (patched d8 versions batch) [skip ci]"
          git push

  trigger-next-batch:
    name: Trigger next batch if leftovers
    needs: aggregate-and-release
    if: needs.aggregate-and-release.outputs.leftover_total != '' && needs.aggregate-and-release.outputs.leftover_total != '0'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger next workflow run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_MAX: ${{ env.MAX_PER_RUN }}
        run: |
          echo "Leftover versions exist -> triggering another batch."
          REF="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          if [ -z "$REF" ]; then
            REF=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_TOKEN" \
              https://api.github.com/repos/${GITHUB_REPOSITORY} | jq -r '.default_branch')
          fi
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/main.yml/dispatches \
            -d "{\"ref\":\"${REF}\",\"inputs\":{\"max_per_run\":\"${NEXT_MAX}\"}}"
          echo "Next batch dispatched."
